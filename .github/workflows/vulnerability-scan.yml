name: Vulnerability Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 6 * * *'  # Daily at 6 AM UTC
  workflow_dispatch:

env:
  FORCE_COLOR: 1

jobs:
  vulnerability-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      security-events: write
      actions: read
      
    steps:
      - name: 🔖 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          
      - name: 📦 Install dependencies
        run: npm ci
        
      - name: 📁 Create output directory
        run: mkdir -p ./sbom
        
      - name: 🔍 Run Trivy vulnerability scanner (JSON)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'json'
          output: './sbom/vulnerability-report.json'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          ignore-unfixed: false
          
      - name: 🔍 Run Trivy vulnerability scanner (SARIF)
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: './sbom/vulnerability-report.sarif'
          severity: 'CRITICAL,HIGH,MEDIUM,LOW'
          
      - name: 📊 Generate vulnerability summary
        run: |
          chmod +x .github/scripts/scan-vulnerabilities.sh
          .github/scripts/scan-vulnerabilities.sh
          
      - name: 📋 Upload SARIF to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: './sbom/vulnerability-report.sarif'
          category: 'trivy-fs-scan'
          
      - name: 🔧 Generate VEX document
        run: |
          chmod +x .github/scripts/generate-vex.sh
          .github/scripts/generate-vex.sh
        continue-on-error: true
        
      - name: 📈 Analyze vulnerability trends
        run: |
          echo "📊 Vulnerability Analysis" > ./sbom/vulnerability-analysis.txt
          echo "=========================" >> ./sbom/vulnerability-analysis.txt
          echo "Scan Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> ./sbom/vulnerability-analysis.txt
          echo "" >> ./sbom/vulnerability-analysis.txt
          
          if [[ -f "./sbom/vulnerability-report.json" ]]; then
            # Extract package-level statistics
            echo "Top 5 Most Vulnerable Packages:" >> ./sbom/vulnerability-analysis.txt
            jq -r '.Results[]?.Vulnerabilities[]? | "\(.PkgName)"' ./sbom/vulnerability-report.json 2>/dev/null | sort | uniq -c | sort -nr | head -5 >> ./sbom/vulnerability-analysis.txt
            echo "" >> ./sbom/vulnerability-analysis.txt
            
            # Recent vulnerabilities (if publish date available)
            echo "Recent Vulnerabilities (Last 30 days):" >> ./sbom/vulnerability-analysis.txt
            RECENT_DATE=$(date -d "30 days ago" +"%Y-%m-%d" 2>/dev/null || date -v-30d +"%Y-%m-%d" 2>/dev/null || echo "")
            if [[ -n "$RECENT_DATE" ]]; then
              jq -r --arg date "$RECENT_DATE" '.Results[]?.Vulnerabilities[]? | select(.PublishedDate? >= $date) | "\(.VulnerabilityID): \(.Title // .Description)"' ./sbom/vulnerability-report.json 2>/dev/null | head -10 >> ./sbom/vulnerability-analysis.txt
            fi
          else
            echo "No vulnerability data available" >> ./sbom/vulnerability-analysis.txt
          fi
          
      - name: 🚨 Check for critical vulnerabilities
        run: |
          if [[ -f "./sbom/vulnerability-report.json" ]]; then
            CRITICAL_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "CRITICAL")] | length' ./sbom/vulnerability-report.json 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '[.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH")] | length' ./sbom/vulnerability-report.json 2>/dev/null || echo "0")
            
            echo "Critical vulnerabilities: $CRITICAL_COUNT"
            echo "High vulnerabilities: $HIGH_COUNT"
            
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "::warning::Found $CRITICAL_COUNT critical vulnerabilities!"
              echo "🚨 CRITICAL VULNERABILITIES DETECTED!" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Please review the security tab and take immediate action." >> $GITHUB_STEP_SUMMARY
            fi
            
            if [ "$HIGH_COUNT" -gt 5 ]; then
              echo "::warning::Found $HIGH_COUNT high severity vulnerabilities!"
            fi
          fi
          
      - name: 📤 Upload vulnerability reports
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports-${{ github.run_id }}
          path: |
            ./sbom/vulnerability-report.json
            ./sbom/vulnerability-report.sarif
            ./sbom/vulnerability-summary.txt
            ./sbom/vulnerability-analysis.txt
            ./sbom/vex-document.json
          retention-days: 90
          compression-level: 6
          
      - name: 💾 Commit vulnerability reports to repository
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Add vulnerability reports
          git add ./sbom/vulnerability-summary.txt
          git add ./sbom/vulnerability-analysis.txt
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "No vulnerability report changes to commit"
          else
            git commit -m "chore: update vulnerability reports [skip ci]

            - Updated vulnerability scan results
            - Generated by GitHub Actions workflow  
            - Commit: ${{ github.sha }}
            - Run ID: ${{ github.run_id }}"
            git push
          fi
          
      - name: 📋 Summary
        run: |
          echo "## 🔒 Vulnerability Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ -f "./sbom/vulnerability-summary.txt" ]]; then
            echo "### Scan Results" >> $GITHUB_STEP_SUMMARY
            cat ./sbom/vulnerability-summary.txt | tail -n +4 >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Vulnerability scan failed or no results generated" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Taken" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SARIF report uploaded to GitHub Security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Detailed reports saved as artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ VEX document generated (if applicable)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review the [Security tab](${{ github.server_url }}/${{ github.repository }}/security) for detailed findings" >> $GITHUB_STEP_SUMMARY
          echo "2. Check [Dependency insights](${{ github.server_url }}/${{ github.repository }}/network/dependencies) for dependency updates" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor [Security advisories](${{ github.server_url }}/${{ github.repository }}/security/advisories) for new threats" >> $GITHUB_STEP_SUMMARY